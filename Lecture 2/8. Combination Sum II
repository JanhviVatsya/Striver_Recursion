Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 Note: The solution, sets must be in sorted orderr -> not mentioned in question but it is required

 Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

-------------------------------------------------------------------------------------------------------------------------

class Solution {
public:

    void recursion(int index, vector<int>& candidates, vector<vector<int>>& ans, vector<int>&curr, int target){
        if(target == 0){
            ans.push_back(curr);
            return;
        }

        for( int i= index; i<candidates.size(); i++){
            if(i>index && candidates[i] == candidates[i-1]) continue;
            if(candidates[i] > target) break;
            curr.push_back(candidates[i]);
            recursion(i+1, candidates, ans, curr, target-candidates[i]);
            curr.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int>curr;
        sort(candidates.begin(), candidates.end());
        recursion(0, candidates, ans, curr, target);
        return ans;
    }
};
